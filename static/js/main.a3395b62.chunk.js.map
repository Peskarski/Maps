{"version":3,"sources":["components/GoogleMap/Marker/Marker.tsx","components/GoogleMap/Marker/pics/Marker.png","components/GoogleMap/GoogleMap.tsx","components/GoogleMap/utils.ts","components/ItemsList/utils.ts","components/ItemsList/ItemsList.tsx","App.tsx","index.tsx","components/ItemsList/ItemsList.module.css","App.module.css","components/GoogleMap/Marker/Marker.module.css","components/GoogleMap/GoogleMap.module.css"],"names":["Marker","avatar","src","alt","className","styles","marker","DEFAULT_CENTER","lat","lng","DEFAULT_SIZE","width","height","GoogleMap","markers","currentPosition","setListOnBoundsChanged","useState","isFilterOnBoundsChangeEnabled","setIsFilterOnBoundsChangeEnabled","zoom","setZoom","center","setCenter","useEffect","bounds","list","latArray","map","lngArray","sw","Math","min","ne","max","getCoordinatesForFitBounds","fitBounds","checked","onChange","e","target","bootstrapURLKeys","key","process","defaultCenter","defaultZoom","markersOnMap","robots","filter","isPointInsideBounds","markerImg","id","deg2rad","deg","PI","getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","dLat","dLon","a","sin","cos","d","atan2","sqrt","round","ItemsList","setMarkersOnListChange","renderedList","setRenderedList","currentPage","setCurrentPage","changeMarkersAfterListChanged","listPartWithDistances","slice","item","distance","defaultCurrent","current","total","length","pageSize","showSizeChanger","itemLayout","dataSource","renderItem","Item","Meta","info","name","first_name","last_name","App","Header","Layout","Sider","Content","setList","setMarkers","setCurrentPosition","gotPositionSuccessfully","pos","coords","latitude","longitude","navigator","geolocation","getCurrentPosition","layout","header","sider","theme","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a3395b62.chunk.js","sourcesContent":["import React from 'react';\nimport { MarkerType } from './types';\nimport styles from './Marker.module.css';\n\nexport const Marker: React.FC<MarkerType> = ({ avatar }) => {\n  return (\n    <div>\n      <img src={avatar} alt=\"avatar\" className={styles.marker} />\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/Marker.2a302402.png\";","import React, { useState, useEffect } from 'react';\nimport GoogleMapReact, { fitBounds } from 'google-map-react';\nimport { Checkbox } from 'antd';\nimport { MapInterface, Bounds } from './types';\nimport { Marker } from './Marker';\nimport styles from './GoogleMap.module.css';\nimport robots from '../../MOCK_DATA.json';\nimport markerImg from './Marker/pics/Marker.png';\nimport { isPointInsideBounds, getCoordinatesForFitBounds } from './utils';\n\nconst textOnCheckbox = 'Apply filter on bounds change';\nconst DEFAULT_CENTER = { lat: 53.893009, lng: 27.567444 };\nconst DEFAULT_ZOOM = 4;\nconst DEFAULT_SIZE = { width: 1315, height: 800 };\n\nexport const GoogleMap: React.FC<MapInterface> = ({ markers, currentPosition, setListOnBoundsChanged }) => {\n  const [isFilterOnBoundsChangeEnabled, setIsFilterOnBoundsChangeEnabled] = useState(true);\n  const [zoom, setZoom] = useState(DEFAULT_ZOOM);\n  const [center, setCenter] = useState(DEFAULT_CENTER);\n\n  const handleBoundsChange = ({ bounds, zoom }: { bounds: Bounds; zoom: number }) => {\n    setZoom(zoom);\n    if (isFilterOnBoundsChangeEnabled) {\n      const markersOnMap = robots.filter(({ lat, lng }) => isPointInsideBounds({ lat, lng }, bounds));\n      setListOnBoundsChanged(markersOnMap);\n    }\n  };\n\n  useEffect(() => {\n    if (!isFilterOnBoundsChangeEnabled) {\n      const bounds = getCoordinatesForFitBounds(markers);\n      const { zoom, center } = fitBounds(bounds, DEFAULT_SIZE);\n      setZoom(zoom);\n      setCenter(center);\n    }\n  }, [markers, isFilterOnBoundsChangeEnabled]);\n\n  return (\n    <div className={styles.map}>\n      <Checkbox\n        checked={isFilterOnBoundsChangeEnabled}\n        onChange={(e) => {\n          setIsFilterOnBoundsChangeEnabled(e.target.checked);\n        }}\n      >\n        {textOnCheckbox}\n      </Checkbox>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: `${process.env.REACT_APP_API_KEY}` }}\n        defaultCenter={DEFAULT_CENTER}\n        defaultZoom={5}\n        zoom={zoom}\n        center={center}\n        onChange={handleBoundsChange}\n      >\n        {currentPosition && <Marker lat={currentPosition.lat} lng={currentPosition.lng} avatar={markerImg} />}\n        {markers.map(({ id, lat, lng, avatar }) => (\n          <Marker lat={lat} lng={lng} key={id} avatar={avatar} />\n        ))}\n      </GoogleMapReact>\n    </div>\n  );\n};\n","import { Coordinates, Bounds } from './types';\nimport { ListItem } from '../ItemsList/types';\n\nexport const isPointInsideBounds = ({ lat, lng }: Coordinates, { ne, sw }: Bounds) =>\n  lat > sw.lat && lat < ne.lat && lng > sw.lng && lng < ne.lng;\n\nexport const getCoordinatesForFitBounds = (list: ListItem[]) => {\n  const latArray = list.map(({ lat }) => lat);\n  const lngArray = list.map(({ lng }) => lng);\n  const sw = {\n    lat: Math.min(...latArray),\n    lng: Math.min(...lngArray),\n  };\n  const ne = {\n    lat: Math.max(...latArray),\n    lng: Math.max(...lngArray),\n  };\n\n  return { ne, sw };\n};\n","import { ListItem } from './types';\n\nconst deg2rad = (deg: number) => {\n  return deg * (Math.PI / 180);\n};\n\nexport const getDistanceFromLatLonInKm = (lat1: number, lon1: number, lat2: number, lon2: number) => {\n  const R = 6371; // Radius of the earth in km\n  const dLat = deg2rad(lat2 - lat1);\n  const dLon = deg2rad(lon2 - lon1);\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c; // Distance in km\n  return Math.round(d);\n};\n","import React, { useState, useEffect } from 'react';\nimport { List, Avatar } from 'antd';\nimport { Pagination } from 'antd';\nimport styles from './ItemsList.module.css';\nimport { ListInterface, ListItem } from './types';\nimport { getDistanceFromLatLonInKm } from './utils';\n\nconst header = 'Robots';\nconst DEFAULT_CURRENT_PAGE = 1;\nconst ITEMS_PER_PAGE = 10;\n\nexport const ItemsList: React.FC<ListInterface> = ({ list, currentPosition, setMarkersOnListChange }) => {\n  const [renderedList, setRenderedList] = useState<ListItem[]>([]);\n  const [currentPage, setCurrentPage] = useState(DEFAULT_CURRENT_PAGE);\n\n  const changeMarkersAfterListChanged = () => {\n    const listPart = list.slice((currentPage - 1) * ITEMS_PER_PAGE, currentPage * ITEMS_PER_PAGE);\n\n    const listPartWithDistances = listPart.map((item) => {\n      return currentPosition\n        ? {\n            ...item,\n            distance: getDistanceFromLatLonInKm(item.lat, item.lng, currentPosition.lat, currentPosition.lng),\n          }\n        : item;\n    });\n    setRenderedList(listPartWithDistances);\n    setMarkersOnListChange(listPartWithDistances);\n  };\n\n  useEffect(() => {\n    changeMarkersAfterListChanged();\n  }, [currentPage]);\n\n  useEffect(() => {\n    setCurrentPage(DEFAULT_CURRENT_PAGE);\n    changeMarkersAfterListChanged();\n  }, [list]);\n\n  return (\n    <div>\n      <h2>{header}</h2>\n      <Pagination\n        defaultCurrent={1}\n        current={currentPage}\n        total={list.length}\n        onChange={(currentPage) => setCurrentPage(currentPage)}\n        pageSize={10}\n        showSizeChanger={false}\n      />\n      <List\n        className={styles.list}\n        itemLayout=\"horizontal\"\n        dataSource={renderedList}\n        renderItem={(item) => (\n          <List.Item>\n            <List.Item.Meta avatar={<Avatar src={item.avatar} />} />\n            <div className={styles.info}>\n              <div className={styles.name}>\n                <p> {`${item.first_name} ${item.last_name}`}</p>\n              </div>\n              {currentPosition && (\n                <div>\n                  <p>{`${item.distance} km`}</p>\n                </div>\n              )}\n            </div>\n          </List.Item>\n        )}\n      />\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { GoogleMap } from './components/GoogleMap';\nimport { ItemsList } from './components/ItemsList';\nimport { Layout } from 'antd';\nimport styles from './App.module.css';\nimport { ListItem } from './components/ItemsList/types';\nimport { Coordinates } from './components/GoogleMap/types';\nimport 'antd/dist/antd.css';\n\nconst title = 'Maps';\n\nconst App: React.FC = () => {\n  const { Header, Sider, Content } = Layout;\n\n  const [list, setList] = useState<ListItem[]>([]);\n  const [markers, setMarkers] = useState<ListItem[]>([]);\n  const [currentPosition, setCurrentPosition] = useState<Coordinates | null>(null);\n\n  const gotPositionSuccessfully = (pos: any) => {\n    const { latitude, longitude } = pos.coords;\n    setCurrentPosition({ lat: latitude, lng: longitude });\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(gotPositionSuccessfully);\n  }, []);\n\n  const setListOnBoundsChanged = (markers: ListItem[]) => {\n    setList(markers);\n  };\n\n  const setMarkersOnListChange = (robots: ListItem[]) => {\n    setMarkers(robots);\n  };\n\n  return (\n    <Layout className={styles.layout}>\n      <Header className={styles.header}>\n        <h1>{title}</h1>\n      </Header>\n      <Layout>\n        <Content>\n          <GoogleMap\n            setListOnBoundsChanged={setListOnBoundsChanged}\n            markers={markers}\n            currentPosition={currentPosition}\n          />\n        </Content>\n        <Sider width=\"25%\" className={styles.sider} theme=\"light\">\n          <ItemsList list={list} setMarkersOnListChange={setMarkersOnListChange} currentPosition={currentPosition} />\n        </Sider>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ItemsList_list__16cwe\",\"info\":\"ItemsList_info__1Hl3g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"App_layout__1LipR\",\"header\":\"App_header__3ZZ1n\",\"sider\":\"App_sider__3ZkIN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"marker\":\"Marker_marker__1Msl5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"GoogleMap_map__2ZCES\",\"checkbox\":\"GoogleMap_checkbox__2Thew\"};"],"sourceRoot":""}